Project Setup

Core Layer
	AutoMapper
	Packages used:
		- AutoMapper
		- AutoMapper.Extensions.Microsoft.DependencyInjection
		
	Use:
		- Used when we do not want to pass around domain entity around in our application. 
		- Create DTO that models from entity.
			Read from DB - Data from DB is fed to DTO & using automapper, DTO maps to Model which is passed to View
			Save to DB - Model passed from view is fed to DTO using autoMapper and DTO is used to save to DB
			
	CQRS
	Packages used:
		- MediatR
	Use:
		Command Query Responsibility Segregation
			Query = Read from DB
			Command = Write to dB
			
		Per ideal implementation of pattern, we would have different data stores for read/write.
		For ex: Primary DB does the writes & read ops come from Read Replica etc.
		
		Promotes THIN CONTROLLERS. Business Logic moved to HANDLERS
		
		
	FluentValidations
	Packages used:
		- FluentValidation
		- FluentValidation.DependencyInjectionExtensions
		
	Use:
		- Perform validations against DTOs
		- Uses BuilderPattern to extend validations
		- For a particular property, we can specify rules
		- It has a lot of built-in validation checks like .NotEmpty(), .NotNull() etc.
		- If needed, we can write our own custom validations as well.
			For ex: If we want to add a check that while creating a leave, we want to ensure LeaveName is unique(LeaveName entered while creating does not match with any existing leavename present in DB)?, we can do it
		
Infra Layer

	Setting up EF:
	Package used:
		Microsoft.EntityFrameworkCore.SqlServer
		Microsoft.Extensions.Options.ConfigureExtensions
		
	DBContext = Bridge between code and DB. Uses Connectionstring to mediate
	Flagship ORM from Microsoft
	
	Setting up Email Service: SendGrid
	Package used:
		SendGrid
		
	Used Options Pattern here.
	Package required:
		Microsoft.Extensions.Options.ConfigurationExtensions
	
	
API Layer:

	All individual class libraries have extension methods defined:
		ApplicationServiceRegistration
		InfrastructureServiceRegistration
		PersistenceServiceRegistration etc.
		
	Since all are going to be used in API, we need to call those extension methods from WebAPI's Program.cs
	
Scaffolding DBs:

Package used(To WebAPI):
	Microsoft.EntityFrameworkCore.Tools
	
	Now, open PackageManagerConsole and choose a correct default package
	Our DB related code sits in Persistence project
	When we run "Add-Migration", it will generate a folder namely Migration
	A new migration will be added with whatever message we have. That class will have 2 methods : Up and Down.
	Up -> Code to create new/update existing tables
	Down -> Revert it
	
	Next command to actually execute the DB is to use "Update-Database"
	Upon successful execution, EFCore will generate SQL statements

	--SideNote - Issues faced while installing SQL Server 2019. Had a few bad deployments due to errors while starting up
	--Resolved by following this link - https://learn.microsoft.com/en-us/troubleshoot/sql/database-engine/database-file-operations/troubleshoot-os-4kb-disk-sector-size
	
	
	Creating the controller
	When we inject the mediator, it will automatically find the handler using the TRequest we use.
	var leaveTypes = await _mediator.Send(new GetLeaveTypesQuery());
	When we write above line mediator finds the handler that takes in GetLeaveTypesQuery object and returns the TResponse object
	
	
	When working with Validators, if we have some common validators that are required in two or more commands/queries etc.,
	we can create a baseValidator and include then in the child validators using Include() keyword.
	
	Refer BaseLeaveRequestValidator
	            
	Global Error Handling
	Since we have a lot of different custom types of exception, we need to have a central place to handle them and return the correct status back
	That's where middleware come into action
	
	Created a middleware and injected in HTTP request pipeline.
	Also created a CustomProblemDetails that inherits from ProblemDetails & added a custom property there namely Errors
	Also, handled scenario in the middleware
	
Section#7 - Testing:
	Write Automated Tests:
		Validate code operates as expected
		Tests known or expected outcomes
		Best implemented when code is clean & modular
		Easier to accomplish when code is loosely coupled

	Cover unit and integration tests
	XUnit, Moq, Shouldly
	
	Tests typically consists of 3A's
		Arrange
		Act
		Assert

	Unit Tests:
		Added unit test project.
		Project type: xUnit
		Packages:
			Moq
			Shouldly
			
			Other added by default when we created xUnit project:
			coverlet.collector
			Microsoft.NET.Test.Sdk
			xunit
			xunit.runner.visualstudio
			
		Why use mocks?
			For actual application, we'd be using DI to resolve the interfaces and maybe connect to DB or do calls to external endpoints
			However for unit tests, we do not need those actuals to work. Hence we use mocks of those typess
			
			Ideally -> Better to just add Tests keyword against the class we're testing against
		
		XUnit test types:
			Fact - Straight forward testing
			Theory - Provide inline data and do conditional tests
			
	Integration tests:
		Validate behaviors of 3rd party frameworks and technologies
			- For ex: EFCore is our app's integration to DB
			
	Added unit test project.
	Project type: xUnit
	Packages:
		Moq
		Shouldly
		Microsoft.EntityFrameworkCore.InMemory
			
	Why use EFCore.InMemory?
		It's a DB provider for EFCore to be used ONLY for testing purposes
		Just to simulate test DB in memory for writing tests
		
Section#8
	Blazor - .NET Single Page Application development Framework
	NSwag and NSwagStudio - Generate API integration code
	Configure JWT security
		- Admin/Employee role
	Setup UI for leave management features
	
	Added Blazor WebAssembly project
	
	Blazor Project structure
		Properties
			LaunchSettings.json
				- Similar to .NET Core WebAPI. Can configure environment vars, startup settings etc. here
		wwwroot
			All css, js, images, static content to go here
			Contains index.html which is like the base/master page of our app
			<div id="app">
				<!--Entire app gets rendered here-->
			</div>
		Pages
			Individual pages. Pages have razor syntax
		Shared
			All shared components sit here. They can be reused in Pages
		Imports.razor
			Standalone file that contains using statements that'll be globally present throughout the UI
		App.razor
			Setup routing and different interceptors
		Program.cs
			Configuring the UI project.
			
	NSwag
		Integrates and relies heavily on swagger/OpenAPI
		Offers capability
			- Utilize swagger UI and Swagger generator
			- Flexible code generation capabilities
			
		We can generate the code using NSwag Studio. It can generate code (For ex: Typed HttpClient)
		We do not have to write the httpclient's code, models etc. All of it is done by NSwag for us. It reduces our code
		More details - https://learn.microsoft.com/en-us/aspnet/core/tutorials/getting-started-with-nswag?view=aspnetcore-7.0&tabs=visual-studio
		Downloading msi - https://github.com/RicoSuter/NSwag/releases
		
		Running API project. Took the swagger.json URL
		Ran NSwag Studio
		Selected these settings:
			Runtime - Net60
			Specification Url - Pasted the Swagger.json of API - Clicked on Create local Copy
			Outputs - Selected CSharp Client
			Specified Namespace where we want auto generated httpclient code to reside in.
			Checked Generate interfaces for client classes
			Changed JSON Library to SystemTextJson and clicked on Generate
			This generated a Partial class ServiceClient in specified namespace.
			In our case, we can see auto-generated code here - C:\Data\Pet Projects\AspNetCore-CleanArchitecture\HR.LeaveManagement.Clean\HR.LeaveManagement.BlazorUI\Services\Base\ServiceClient.cs
			
			About the auto generated code:
			Contains partial interface IClient and partial class Client implementing that interface
			
		
		Moving further, if we look at auto generated client's code, it expects HttpClient to come in from DI
		So, inorder to make it standard, we're creating 1 more partial class and interface IClient and Client.
		In IClient, we're getting HttpClient and we're setting it in a BaseHttpService class.
		So, then, for each feature in our API i.e. LeaveType, LeaveAllocation and LeaveRequest, we're going to use strongly typed client
		We're going to create 3 contracts ILeaveAllocationService, ILeaveRequestService and ILeaveTypeService and under services,
		we're going to create their respective services. Inherit BaseHttpService and implement their respective contracts
		
		Setting up LeaveTypeManagement services
		If we examine ServiceClient, then it has auto-generated code. 
		That auto-generated code has automatically generated the DTOs that are being returned from the API copied over here as-well
		F12 on LeaveAllocationDetailsDto in ServiceClient.cs.
		For consuming this information on UI, we can:
			a. Either use this DTOs straight up in our pages. But this leads to problem. If DTO/Contract/API response changes, our code on client side will also break.
			b. Create view models locally to UI project. Lengthier but better. We can even put down our own validations on these view models using DataAnnotations. For ex: Required, Display name, MaxLength etc.
				This adds another layer of validation kinda like client side validations
				
			Added new pages for LeaveType in BlazorUI project.
			We can keep razor and .NET Code in single file, but its recommended to keep it separate.
			@code Ctrl+. and backend code will move to separate partial class.
			
			Then, as compared to constructor injection, with blazor, we inject our services with [Inject] keyword
			
Section#9 - Securing API and UI
Added new project in Infrastructure folder:
	Project type:Class Library
	Packages:
		Microsoft.AspNetCore.Identity/Microsoft.AspNetCore.Identity.UI
		Microsoft.AspNetCore.Identity.EntityFrameworkCore
		Microsoft.EntityFrameworkCore.SqlServer
		Microsoft.EntityFrameworkCore.Tools
		Microsoft.Extensions.Options.ConfigurationExtensions - Options pattern
		Microsoft.AspNetCore.Authentication.JwtBearer - Required for JwtBearer related code to work.
		
	Models:
		-Created an ApplicationUser model by extending IdentityUser(Comes from Microsoft.AspNetCore.Identity)
		- Added FirstName and LastName properties to it
		
	Services:
	- IMP -> ApplicationUser -> This is going to be what represents the user of our application.(Through which we will sign-up/login) etc.
		- Created 2 services:
			AuthService
			UserService
		- AuthService
			- Contains Login and Register methods (To be used by the sign up/sign in flow)
			- Added required models to function in HR.LeaveManagement.Application.Models.Identity folder namely:
				- AuthRequest/AuthResponse - Sign in flow
				- RegistrationRequest/RegistrationResponse - Sign up flow
				- Employee - Used for applying leaves
				- JwTSettings - Option pattern - Read from appsettings.json
		- Injecting UserManager and SignInManager into AuthService(Comes from Microsoft.AspNetCore.Identity) 
		- and specified type as ApplicationUser
		-Login
			- Used FindByEmailAsync() to match user based on email
			- Checking password of user.
			- If valid user found, generating a JWT token using GenerateToken()
			- GenerateToken()
				- Getting claims against the user using _userManager.GetClaimsAsync(user)
				- Getting roles against that user  using _userManager.GetRolesAsync(user)
				- Adding custom claims and unioning them with user and role claims
				- Creating Symmetric key
				- Creating signing credentials(HMACSHA256)
				- Newing up JwtSecurityToken object and returning it by setting:
					Issuer - From AppSettings
					Audience - From AppSettings
					Claims - Claims formed above
					Expires - From AppSettings
					SignIngCredentials - Creds
				
			- Setting Token in AuthResponse using JwtSecurityTokenHandler().WriteToken
		
		- Register
			- Creating ApplicationUser object
			- Creating a new user in DB using _userManager.CreateAsync(user, request.Password)(Comes from Microsoft.AspNetCore.Identity)
			- Adding Employee Role
			- Returning response
	DbContext:
		- Creating a new DBContext namely HrLeaveManagementIdentityDbContext.
		- We will inherit from IdentityDbContext<ApplicationUser> as compared to previously used DbContext when we configured
		- EF's DBContext for normal DB interaction
		- For seeding data into this IdentityDB, we can use configurations. Basically, any class implementing IEntityTypeConfiguration<T> will be executed
		
	Configuration:
		- RoleConfiguration : IEntityTypeConfiguration<IdentityRole>
			- Adding 2 default roles to DB: 
				Employee
				Administrator
		- UserConfiguration : IEntityTypeConfiguration<ApplicationUser>
			- Adding 2 applicationUsers to DB
			
		- UserRoleConfiguration : IEntityTypeConfiguration<IdentityUserRole<string>>
			- Assigning 1 user admin's role and second user employee's role
	IdentityServiceRegistration:
		- Extension method to be exposed outside this class library.
		- Adding DBContext(Same as Persistence project). Just change the name of DBContext to HrLeaveManagementIdentityDbContext
		- For now, we're using the same DB's connection string
		- We do not have any custom DBSets. So, all tables that are formed as a part of IdentityDbContext's in-built feature will be formed.
		- services.AddIdentity<ApplicationUser, IdentityRole>()
			.AddEntityFrameworkStores<Context>()
			.AddDefaultTokenProviders()
			- This line adds the reference to identity libraries. We're specifying the TUser and TRole to be ApplicationUser and IdentityRole
			- We're also adding the EntityFrameworkStores to be whatever DB we've specified for storing/using the Identity related tables
			- Add default token providers
			
		- Adding AuthService/UserService to be transient
		- Adding Authentication
			- Setting DefaultAuthenticationScheme and DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme(Using Microsoft.AspNetCore.Authentication.JwtBearer)
			- In reality, that's just a "bearer" string
			- AddJwtBearer()
				- This is where we specify rules for evaluating/validating bearer token
				- All rules sit in TokenValidationParameters option(Use Microsoft.IdentityModel.Tokens)
				- We can decide whatever rules/properties we want to add our check on
					- ValidateIssuerSigningKey = true => Validates the key is present in the token
					- ValidateIssuer = true => Checks Issuer
					- ValidateAudience = true => Checks Audience
					- ValdiateLifetime = true => Checks Lifetime
					- ClockSkew = TimeSpan.Zero => 
						- If we do not set it explicitly, if the token expires at 10:00PM, it will be valid till 10:05PM.
						- To deny this, we need to set the ClockSkew to TimeSpan.Zero
					- ValidIssuer => In this, we need to provide the value we're wanting to validate. Comes from configuration -> JwtSettings:Issuer
					- ValidAudience => Specifying the correct audience value we want to validate. Comes from configuration -> JwtSettings:Audience
					- IssuerSigningKey => Creating Symmetric key by getting bytes from JwtSettings:Key
	
	-Jumping to API project to call this extension method and adding a new section JwtSettings in our appSettings file
	- Calling the exposed serviceRegistration method.
	
	- IMP -> Adding UseAuthentication() middleware that will make the application aware that it needs to invoke the Authentication middleware
	- Make sure to add it before UseAuthorization()
	
	- Adding a new controller namely AuthController
		- Added 2 actions: Login and Register
	- Scaffolding of our Identity DB to insert Identity related tables to our DB
		- Jumping to PMConsole
		- Selecting project as HR.LeaveManagement.Identity
		- "add-migration InitialIdentityMigration"
			- ERROR - Error since more than 1 DBContext found.
		- "add-migration InitialIdentityMigration -Context HrLeaveManagementIdentityDbContext"
			- Going forward, in case of more than 1 DBContexts, always specify the DBContext.
			- So, even for normal migrations, we'd need to specify DbContext using -Context sign
		- Migrations folder created under HR.LeaveManagement.Identity project.
		- Running "update-database -Context HrLeaveManagementIdentityDbContext"
		- Tables created in DB
		
	Running API
		- Testing Login with this body:
			{
				"email": "admin@localhost.com",
				"password": "P@ssword1"
			}
		- We see 200Ok with this token
		- eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJhZG1pbkBsb2NhbGhvc3QuY29tIiwianRpIjoiNTVkN2E1YzYtN2QyZS00NWQ1LWI5NWUtNTlkNDRmY2Y5YzQ5IiwiZW1haWwiOiJhZG1pbkBsb2NhbGhvc3QuY29tIiwidWlkIjoiOGU0NDU4NjUtYTI0ZC00NTQzLWE2YzYtOTQ0M2QwNDhjZGI5IiwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS93cy8yMDA4LzA2L2lkZW50aXR5L2NsYWltcy9yb2xlIjoiQWRtaW5pc3RyYXRvciIsImV4cCI6MTY4Njk4ODQxMywiaXNzIjoiSFJMZWF2ZW1hbmFnZW1lbnQiLCJhdWQiOiJIUkxlYXZlbWFuYWdlbWVudFVzZXIifQ.epQhhfPmbxsVw63TXKxWzV_LsqhEiPBVi98_nhc2XTk
		- Upon decrypting it with JWT.IO, we see all claims we set in AuthService being returned back in the token.
		
	Adding Authentication services to Blazor
	- For newly added endpoints, we need to add HttpClients for the same.
	- NSwagStudio import Swagger to ensure newly added AuthController's endpoints are captured by NSwag
	- Click on Generate Files > So that it generates the newly added client's relevant code in previously saved location:
	- BlazorUI > Services > Base > ServiceClient.cs
	-> We do see ServiceClient modified.